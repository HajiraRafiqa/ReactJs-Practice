What is React?
React is a declarative, efficient, flexible open source front-end JavaScript library developed by Facebook in 2011. 
It follows the component-based approach for building reusable UI components, especially for single page application. 
It is used for developing interactive view layer of web and mobile apps. It was created by Jordan Walke, a software engineer at Facebook. 
It was initially deployed on Facebook's News Feed section in 2011 and later used in its products like WhatsApp & Instagram.

The important features of React are:
It supports server-side rendering.
It will make use of the virtual DOM rather than real DOM (Data Object Model) as RealDOM manipulations are expensive.
It follows unidirectional data binding or data flow.
It uses reusable or composable UI components for developing the view.

What are the biggest limitations of React?
Following is the list of the biggest limitations of React:
React is just a library. It is not a complete framework.
It has a huge library which takes time to understand.
It may be difficult for the new programmers to understand and code.
React uses inline templating and JSX, which may be difficult and act as a barrier. It also makes the coding complex.

JSX stands for JavaScript XML. It allows us to write HTML inside JavaScript and place them in the DOM without using functions like appendChild( ) or createElement().
As stated in the official docs of React, JSX provides syntactic sugar for React.createElement( ) function.
Note- We can create react applications without using JSX as well.
JSX stands for JavaScript XML. It is a React extension which allows writing JavaScript code that looks similar to HTML. It makes HTML file easy to understand. 
The JSX file makes the React application robust and boosts its performance. 
JSX provides you to write XML-like syntax in the same file where you write JavaScript code, 
and then preprocessor (i.e., transpilers like Babel) transform these expressions into actual JavaScript code. 
Just like XML/HTML, JSX tags have a tag name, attributes, and children.

Why can't browsers read JSX?
Browsers cannot read JSX directly because they can only understand JavaScript objects, and JSX is not a regular JavaScript object. 
Thus, we need to transform the JSX file into a JavaScript object using transpilers like Babel and then pass it to the browser.

 Why we use JSX?
It is faster than regular JavaScript because it performs optimization while translating the code to JavaScript.
Instead of separating technologies by putting markup and logic in separate files, React uses components that contain both.
t is type-safe, and most of the errors can be found at compilation time.
It makes easier to create templates.

 What do you understand by Virtual DOM?
A Virtual DOM is a lightweight JavaScript object which is an in-memory representation of real DOM. 
It is an intermediary step between the render function being called and the displaying of elements on the screen. 
It is similar to a node tree which lists the elements, their attributes, and content as objects and their properties. 
The render function creates a node tree of the React components and then updates this node tree in response to the mutations in the data model 
caused by various actions done by the user or by the system.

Explain the working of Virtual DOM.
Virtual DOM works in three steps:
1. Whenever any data changes in the React App, the entire UI is re-rendered in Virtual DOM representation.
2. Now, the difference between the previous DOM representation and the new DOM is calculated.
3. Once the calculations are completed, the real DOM updated with only those things which are changed.

What are the differences between functional and class components?
Before the introduction of Hooks in React, functional components were called stateless components and were behind class components on a feature basis. 
After the introduction of Hooks, functional components are equivalent to class components.

Although functional components are the new trend, the react team insists on keeping class components in React. 
Therefore, it is important to know how these components differ.


What are props in React?
The props in React are the inputs to a component of React. 
They can be single-valued or objects having a set of values that will be passed to components of 
React during creation by using a naming convention that almost looks similar to HTML-tag attributes.
We can say that props are the data passed from a parent component into a child component.

The main purpose of props is to provide different component functionalities such as:

Passing custom data to the React component.
Using through this.props.reactProp inside render() method of the component.
Triggering state changes.
For example, consider we are creating an element with reactProp property as given below: <Element reactProp = "1" />
This reactProp name will be considered as a property attached to the native props object of 
React which already exists on each component created with the help of React library: props.reactProp;.

React State
Every component in react has a built-in state object, which contains all the property values that belong to that component.
In other words, the state object controls the behaviour of a component. 
Any change in the property values of the state object leads to the re-rendering of the component.
Note- State object is not available in functional components but, we can use React Hooks to add state to a functional component.

React Props
Every React component accepts a single object argument called props (which stands for “properties”).  
These props can be passed to a component using HTML attributes and the component accepts these props as an argument.
